name: Build & Publish Prebuilt Libraries

on:
  workflow_dispatch: {}
  push:
    tags: ["v*"]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: build-libs-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, macos-13, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clean libs dir
        shell: bash
        run: rm -rf libs && mkdir -p libs

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target

      - name: Make script executable (POSIX)
        if: runner.os != 'Windows'
        run: chmod +x ./build_lib.sh

      - name: Build cdylib (release)
        shell: bash
        run: |
          ./build_lib.sh release
          echo "After build, libs/ contains:"
          find libs -maxdepth 2 -type f || true

      - name: Discover platform dir
        id: plat
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          dirs=(libs/*/)
          if (( ${#dirs[@]} != 1 )); then
            echo "Expected exactly one platform dir in libs/, found:"
            for d in "${dirs[@]}"; do echo " - ${d#libs/}"; done
            exit 1
          fi
          plat="${dirs[0]%/}"; plat="${plat#libs/}"
          echo "dir=$plat" >> "$GITHUB_OUTPUT"
          echo "Platform dir: $plat"

      - name: Upload platform artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.plat.outputs.dir }}
          path: libs/${{ steps.plat.outputs.dir }}/
          if-no-files-found: error

  publish:
    name: Aggregate & PR commit
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.repository.default_branch }}

      - uses: actions/download-artifact@v4
        with:
          path: _libs_artifacts
          merge-multiple: false

      - name: Merge platform folders into repo
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mkdir -p libs
          echo "Downloaded artifact roots:"
          for d in _libs_artifacts/*; do
            [ -d "$d" ] && echo " - $(basename "$d")"
          done
          for src in _libs_artifacts/*; do
            [ -d "$src" ] || continue
            plat="$(basename "$src")"
            dest="libs/$plat"
            echo "Syncing $src -> $dest"
            mkdir -p "$dest"
            rsync -a "$src"/ "$dest"/
          done

          echo "Merged libs layout:"
          for f in libs/*/*; do [ -f "$f" ] && echo "$f"; done

      - name: Skip if no libs changed
        shell: bash
        run: |
          git add -N libs || true
          if git diff --quiet -- libs ; then
            echo "No changes under libs/; skipping PR."
            exit 0
          fi

      - name: Generate & print SHA256 sums
        shell: bash
        run: |
          set -euo pipefail
          calc() {
            if command -v sha256sum >/dev/null 2>&1; then
              sha256sum "$1" | awk '{print $1}'
            elif command -v shasum >/dev/null 2>&1; then
              shasum -a 256 "$1" | awk '{print $1}'
            elif command -v openssl >/dev/null 2>&1; then
              openssl dgst -sha256 "$1" | awk '{print $2}'
            else
              echo "No SHA-256 tool available" >&2; exit 1
            fi
          }
          : > libs/MANIFEST-SHA256.txt
          echo "SHA256 checksums:"
          shopt -s nullglob
          for f in libs/*/*.so libs/*/*.dylib libs/*/*.dll; do
            [ -f "$f" ] || continue
            sum="$(calc "$f")"
            rel="${f#libs/}"
            printf "%s  %s\n" "$sum" "$rel" | tee -a libs/MANIFEST-SHA256.txt
            printf "%s\n" "$sum" > "${f}.sha256"
          done
          echo "Wrote libs/MANIFEST-SHA256.txt and per-file .sha256 sidecars."

      - name: Create PR with updated libs
        uses: peter-evans/create-pull-request@v6
        with:
          base: ${{ github.event.repository.default_branch }}
          branch: ci/update-libs/${{ github.event.repository.default_branch }}
          commit-message: "chore(libs): update prebuilt libs for ${{ github.ref_name }}"
          title: "Update prebuilt libs for ${{ github.ref_name }}"
          body: |
            Update prebuilt native libraries under `libs/` (built from ${{ github.sha }}).
          delete-branch: true
