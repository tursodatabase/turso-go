name: Build & Publish Prebuilt Libraries

on:
  workflow_dispatch: {}
  push:
    tags: ["v*"]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: build-libs-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, macos-13, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clean libs dir
        shell: bash
        run: rm -rf libs && mkdir -p libs

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target

      - name: Make script executable (POSIX)
        if: runner.os != 'Windows'
        run: chmod +x ./build_lib.sh

      - name: Build cdylib (release)
        shell: bash
        run: |
          ./build_lib.sh release
          echo "After build, libs/ contains:"
          find libs -maxdepth 2 -type f || true

      - name: Discover platform dir
        id: plat
        shell: bash
        run: |
          set -euo pipefail
          plat="$(find libs -mindepth 1 -maxdepth 1 -type d -printf '%f\n')"
          if [[ -z "$plat" || $(echo "$plat" | wc -l) -ne 1 ]]; then
            echo "Expected exactly one platform dir in libs/, got:"
            find libs -mindepth 1 -maxdepth 1 -type d -printf ' - %f\n'
            exit 1
          fi
          echo "dir=$plat" >> "$GITHUB_OUTPUT"
          echo "Platform dir: $plat"

      - name: Upload platform artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.plat.outputs.dir }}
          path: libs/${{ steps.plat.outputs.dir }}/
          if-no-files-found: error

  publish:
    name: Aggregate & PR commit
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.repository.default_branch }}

      - uses: actions/download-artifact@v4
        with:
          path: _libs_artifacts
          merge-multiple: false

      - name: Merge platform folders into repo
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p libs
          for d in _libs_artifacts/*; do
            plat="$(basename "$d")"
            echo "Syncing $d -> libs/$plat"
            mkdir -p "libs/$plat"
            rsync -a "$d/." "libs/$plat/"
          done
          echo "Merged libs layout:"
          find libs -maxdepth 2 -type f -print

      - name: Skip if no libs changed
        shell: bash
        run: |
          git add -N libs || true
          if git diff --quiet -- libs ; then
            echo "No changes under libs/; skipping PR."
            exit 0
          fi

      - name: Create PR with updated libs
        uses: peter-evans/create-pull-request@v6
        with:
          base: ${{ github.event.repository.default_branch }}
          branch: ci/update-libs/${{ github.event.repository.default_branch }}
          commit-message: "chore(libs): update prebuilt libs for ${{ github.ref_name }}"
          title: "Update prebuilt libs for ${{ github.ref_name }}"
          body: |
            Update prebuilt native libraries under `libs/` (built from ${{ github.sha }}).
          delete-branch: true
